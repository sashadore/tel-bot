import os
import logging
import asyncio
import threading

from flask import Flask, request
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

app = Flask(__name__)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ telegram –±–æ—Ç–∞ (Application)
telegram_app = ApplicationBuilder().token(TOKEN).build()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ üëã")

telegram_app.add_handler(CommandHandler("start", start))

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ event loop Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start_event_loop(loop):
    asyncio.set_event_loop(loop)
    logger.info("–ó–∞–ø—É—Å–∫ event loop Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    loop.run_forever()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º telegram_app (—Å–æ–∑–¥–∞–µ—Ç—Å—è event loop)
telegram_app.initialize()

# –ó–∞–ø—É—Å–∫–∞–µ–º event loop telegram_app –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
loop = asyncio.get_event_loop()
threading.Thread(target=start_event_loop, args=(loop,), daemon=True).start()

# –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Flask
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram")
    update = Update.de_json(request.get_json(force=True), telegram_app.bot)
    # –ë–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    asyncio.run_coroutine_threadsafe(telegram_app.process_update(update), loop)
    return "OK"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    logger.info(f"–ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host="0.0.0.0", port=port)
